/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as authLayoutRouteImport } from './routes/(auth)/layout'
import { Route as appLayoutRouteImport } from './routes/(app)/layout'
import { Route as appIndexRouteImport } from './routes/(app)/index'
import { Route as authRegisterRouteImport } from './routes/(auth)/register'
import { Route as authLoginRouteImport } from './routes/(auth)/login'
import { Route as appWelcomeRouteImport } from './routes/(app)/welcome'
import { Route as appTokensIndexRouteImport } from './routes/(app)/tokens/index'
import { Route as appProfileIndexRouteImport } from './routes/(app)/profile/index'
import { Route as appInvoicesIndexRouteImport } from './routes/(app)/invoices/index'
import { Route as appCandidatesIndexRouteImport } from './routes/(app)/candidates/index'
import { Route as appTokensSuccessRouteImport } from './routes/(app)/tokens/success'
import { Route as appCandidatesAddRouteImport } from './routes/(app)/candidates/add'
import { Route as appCandidatesCandidateIdLayoutRouteImport } from './routes/(app)/candidates/$candidateId/layout'
import { Route as appCandidatesCandidateIdProfileRouteImport } from './routes/(app)/candidates/$candidateId/profile'
import { Route as appCandidatesCandidateIdMatchingCriteriaRouteImport } from './routes/(app)/candidates/$candidateId/matching-criteria'
import { ServerRoute as ApiStripeWebhookServerRouteImport } from './routes/api/stripe-webhook'
import { ServerRoute as ApiTrpcSplatServerRouteImport } from './routes/api/trpc.$'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth.$'

const rootServerRouteImport = createServerRootRoute()

const authLayoutRoute = authLayoutRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRouteImport,
} as any)
const appLayoutRoute = appLayoutRouteImport.update({
  id: '/(app)',
  getParentRoute: () => rootRouteImport,
} as any)
const appIndexRoute = appIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => appLayoutRoute,
} as any)
const authRegisterRoute = authRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => authLayoutRoute,
} as any)
const authLoginRoute = authLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => authLayoutRoute,
} as any)
const appWelcomeRoute = appWelcomeRouteImport.update({
  id: '/welcome',
  path: '/welcome',
  getParentRoute: () => appLayoutRoute,
} as any)
const appTokensIndexRoute = appTokensIndexRouteImport.update({
  id: '/tokens/',
  path: '/tokens/',
  getParentRoute: () => appLayoutRoute,
} as any)
const appProfileIndexRoute = appProfileIndexRouteImport.update({
  id: '/profile/',
  path: '/profile/',
  getParentRoute: () => appLayoutRoute,
} as any)
const appInvoicesIndexRoute = appInvoicesIndexRouteImport.update({
  id: '/invoices/',
  path: '/invoices/',
  getParentRoute: () => appLayoutRoute,
} as any)
const appCandidatesIndexRoute = appCandidatesIndexRouteImport.update({
  id: '/candidates/',
  path: '/candidates/',
  getParentRoute: () => appLayoutRoute,
} as any)
const appTokensSuccessRoute = appTokensSuccessRouteImport.update({
  id: '/tokens/success',
  path: '/tokens/success',
  getParentRoute: () => appLayoutRoute,
} as any)
const appCandidatesAddRoute = appCandidatesAddRouteImport.update({
  id: '/candidates/add',
  path: '/candidates/add',
  getParentRoute: () => appLayoutRoute,
} as any)
const appCandidatesCandidateIdLayoutRoute =
  appCandidatesCandidateIdLayoutRouteImport.update({
    id: '/candidates/$candidateId',
    path: '/candidates/$candidateId',
    getParentRoute: () => appLayoutRoute,
  } as any)
const appCandidatesCandidateIdProfileRoute =
  appCandidatesCandidateIdProfileRouteImport.update({
    id: '/profile',
    path: '/profile',
    getParentRoute: () => appCandidatesCandidateIdLayoutRoute,
  } as any)
const appCandidatesCandidateIdMatchingCriteriaRoute =
  appCandidatesCandidateIdMatchingCriteriaRouteImport.update({
    id: '/matching-criteria',
    path: '/matching-criteria',
    getParentRoute: () => appCandidatesCandidateIdLayoutRoute,
  } as any)
const ApiStripeWebhookServerRoute = ApiStripeWebhookServerRouteImport.update({
  id: '/api/stripe-webhook',
  path: '/api/stripe-webhook',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiTrpcSplatServerRoute = ApiTrpcSplatServerRouteImport.update({
  id: '/api/trpc/$',
  path: '/api/trpc/$',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof appIndexRoute
  '/welcome': typeof appWelcomeRoute
  '/login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
  '/candidates/$candidateId': typeof appCandidatesCandidateIdLayoutRouteWithChildren
  '/candidates/add': typeof appCandidatesAddRoute
  '/tokens/success': typeof appTokensSuccessRoute
  '/candidates': typeof appCandidatesIndexRoute
  '/invoices': typeof appInvoicesIndexRoute
  '/profile': typeof appProfileIndexRoute
  '/tokens': typeof appTokensIndexRoute
  '/candidates/$candidateId/matching-criteria': typeof appCandidatesCandidateIdMatchingCriteriaRoute
  '/candidates/$candidateId/profile': typeof appCandidatesCandidateIdProfileRoute
}
export interface FileRoutesByTo {
  '/': typeof appIndexRoute
  '/welcome': typeof appWelcomeRoute
  '/login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
  '/candidates/$candidateId': typeof appCandidatesCandidateIdLayoutRouteWithChildren
  '/candidates/add': typeof appCandidatesAddRoute
  '/tokens/success': typeof appTokensSuccessRoute
  '/candidates': typeof appCandidatesIndexRoute
  '/invoices': typeof appInvoicesIndexRoute
  '/profile': typeof appProfileIndexRoute
  '/tokens': typeof appTokensIndexRoute
  '/candidates/$candidateId/matching-criteria': typeof appCandidatesCandidateIdMatchingCriteriaRoute
  '/candidates/$candidateId/profile': typeof appCandidatesCandidateIdProfileRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(app)': typeof appLayoutRouteWithChildren
  '/(auth)': typeof authLayoutRouteWithChildren
  '/(app)/welcome': typeof appWelcomeRoute
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/register': typeof authRegisterRoute
  '/(app)/': typeof appIndexRoute
  '/(app)/candidates/$candidateId': typeof appCandidatesCandidateIdLayoutRouteWithChildren
  '/(app)/candidates/add': typeof appCandidatesAddRoute
  '/(app)/tokens/success': typeof appTokensSuccessRoute
  '/(app)/candidates/': typeof appCandidatesIndexRoute
  '/(app)/invoices/': typeof appInvoicesIndexRoute
  '/(app)/profile/': typeof appProfileIndexRoute
  '/(app)/tokens/': typeof appTokensIndexRoute
  '/(app)/candidates/$candidateId/matching-criteria': typeof appCandidatesCandidateIdMatchingCriteriaRoute
  '/(app)/candidates/$candidateId/profile': typeof appCandidatesCandidateIdProfileRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/welcome'
    | '/login'
    | '/register'
    | '/candidates/$candidateId'
    | '/candidates/add'
    | '/tokens/success'
    | '/candidates'
    | '/invoices'
    | '/profile'
    | '/tokens'
    | '/candidates/$candidateId/matching-criteria'
    | '/candidates/$candidateId/profile'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/welcome'
    | '/login'
    | '/register'
    | '/candidates/$candidateId'
    | '/candidates/add'
    | '/tokens/success'
    | '/candidates'
    | '/invoices'
    | '/profile'
    | '/tokens'
    | '/candidates/$candidateId/matching-criteria'
    | '/candidates/$candidateId/profile'
  id:
    | '__root__'
    | '/(app)'
    | '/(auth)'
    | '/(app)/welcome'
    | '/(auth)/login'
    | '/(auth)/register'
    | '/(app)/'
    | '/(app)/candidates/$candidateId'
    | '/(app)/candidates/add'
    | '/(app)/tokens/success'
    | '/(app)/candidates/'
    | '/(app)/invoices/'
    | '/(app)/profile/'
    | '/(app)/tokens/'
    | '/(app)/candidates/$candidateId/matching-criteria'
    | '/(app)/candidates/$candidateId/profile'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  appLayoutRoute: typeof appLayoutRouteWithChildren
  authLayoutRoute: typeof authLayoutRouteWithChildren
}
export interface FileServerRoutesByFullPath {
  '/api/stripe-webhook': typeof ApiStripeWebhookServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/stripe-webhook': typeof ApiStripeWebhookServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/stripe-webhook': typeof ApiStripeWebhookServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/stripe-webhook' | '/api/auth/$' | '/api/trpc/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/stripe-webhook' | '/api/auth/$' | '/api/trpc/$'
  id: '__root__' | '/api/stripe-webhook' | '/api/auth/$' | '/api/trpc/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiStripeWebhookServerRoute: typeof ApiStripeWebhookServerRoute
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
  ApiTrpcSplatServerRoute: typeof ApiTrpcSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)': {
      id: '/(app)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)/': {
      id: '/(app)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appIndexRouteImport
      parentRoute: typeof appLayoutRoute
    }
    '/(auth)/register': {
      id: '/(auth)/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authRegisterRouteImport
      parentRoute: typeof authLayoutRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginRouteImport
      parentRoute: typeof authLayoutRoute
    }
    '/(app)/welcome': {
      id: '/(app)/welcome'
      path: '/welcome'
      fullPath: '/welcome'
      preLoaderRoute: typeof appWelcomeRouteImport
      parentRoute: typeof appLayoutRoute
    }
    '/(app)/tokens/': {
      id: '/(app)/tokens/'
      path: '/tokens'
      fullPath: '/tokens'
      preLoaderRoute: typeof appTokensIndexRouteImport
      parentRoute: typeof appLayoutRoute
    }
    '/(app)/profile/': {
      id: '/(app)/profile/'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof appProfileIndexRouteImport
      parentRoute: typeof appLayoutRoute
    }
    '/(app)/invoices/': {
      id: '/(app)/invoices/'
      path: '/invoices'
      fullPath: '/invoices'
      preLoaderRoute: typeof appInvoicesIndexRouteImport
      parentRoute: typeof appLayoutRoute
    }
    '/(app)/candidates/': {
      id: '/(app)/candidates/'
      path: '/candidates'
      fullPath: '/candidates'
      preLoaderRoute: typeof appCandidatesIndexRouteImport
      parentRoute: typeof appLayoutRoute
    }
    '/(app)/tokens/success': {
      id: '/(app)/tokens/success'
      path: '/tokens/success'
      fullPath: '/tokens/success'
      preLoaderRoute: typeof appTokensSuccessRouteImport
      parentRoute: typeof appLayoutRoute
    }
    '/(app)/candidates/add': {
      id: '/(app)/candidates/add'
      path: '/candidates/add'
      fullPath: '/candidates/add'
      preLoaderRoute: typeof appCandidatesAddRouteImport
      parentRoute: typeof appLayoutRoute
    }
    '/(app)/candidates/$candidateId': {
      id: '/(app)/candidates/$candidateId'
      path: '/candidates/$candidateId'
      fullPath: '/candidates/$candidateId'
      preLoaderRoute: typeof appCandidatesCandidateIdLayoutRouteImport
      parentRoute: typeof appLayoutRoute
    }
    '/(app)/candidates/$candidateId/profile': {
      id: '/(app)/candidates/$candidateId/profile'
      path: '/profile'
      fullPath: '/candidates/$candidateId/profile'
      preLoaderRoute: typeof appCandidatesCandidateIdProfileRouteImport
      parentRoute: typeof appCandidatesCandidateIdLayoutRoute
    }
    '/(app)/candidates/$candidateId/matching-criteria': {
      id: '/(app)/candidates/$candidateId/matching-criteria'
      path: '/matching-criteria'
      fullPath: '/candidates/$candidateId/matching-criteria'
      preLoaderRoute: typeof appCandidatesCandidateIdMatchingCriteriaRouteImport
      parentRoute: typeof appCandidatesCandidateIdLayoutRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/stripe-webhook': {
      id: '/api/stripe-webhook'
      path: '/api/stripe-webhook'
      fullPath: '/api/stripe-webhook'
      preLoaderRoute: typeof ApiStripeWebhookServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/trpc/$': {
      id: '/api/trpc/$'
      path: '/api/trpc/$'
      fullPath: '/api/trpc/$'
      preLoaderRoute: typeof ApiTrpcSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface appCandidatesCandidateIdLayoutRouteChildren {
  appCandidatesCandidateIdMatchingCriteriaRoute: typeof appCandidatesCandidateIdMatchingCriteriaRoute
  appCandidatesCandidateIdProfileRoute: typeof appCandidatesCandidateIdProfileRoute
}

const appCandidatesCandidateIdLayoutRouteChildren: appCandidatesCandidateIdLayoutRouteChildren =
  {
    appCandidatesCandidateIdMatchingCriteriaRoute:
      appCandidatesCandidateIdMatchingCriteriaRoute,
    appCandidatesCandidateIdProfileRoute: appCandidatesCandidateIdProfileRoute,
  }

const appCandidatesCandidateIdLayoutRouteWithChildren =
  appCandidatesCandidateIdLayoutRoute._addFileChildren(
    appCandidatesCandidateIdLayoutRouteChildren,
  )

interface appLayoutRouteChildren {
  appWelcomeRoute: typeof appWelcomeRoute
  appIndexRoute: typeof appIndexRoute
  appCandidatesCandidateIdLayoutRoute: typeof appCandidatesCandidateIdLayoutRouteWithChildren
  appCandidatesAddRoute: typeof appCandidatesAddRoute
  appTokensSuccessRoute: typeof appTokensSuccessRoute
  appCandidatesIndexRoute: typeof appCandidatesIndexRoute
  appInvoicesIndexRoute: typeof appInvoicesIndexRoute
  appProfileIndexRoute: typeof appProfileIndexRoute
  appTokensIndexRoute: typeof appTokensIndexRoute
}

const appLayoutRouteChildren: appLayoutRouteChildren = {
  appWelcomeRoute: appWelcomeRoute,
  appIndexRoute: appIndexRoute,
  appCandidatesCandidateIdLayoutRoute:
    appCandidatesCandidateIdLayoutRouteWithChildren,
  appCandidatesAddRoute: appCandidatesAddRoute,
  appTokensSuccessRoute: appTokensSuccessRoute,
  appCandidatesIndexRoute: appCandidatesIndexRoute,
  appInvoicesIndexRoute: appInvoicesIndexRoute,
  appProfileIndexRoute: appProfileIndexRoute,
  appTokensIndexRoute: appTokensIndexRoute,
}

const appLayoutRouteWithChildren = appLayoutRoute._addFileChildren(
  appLayoutRouteChildren,
)

interface authLayoutRouteChildren {
  authLoginRoute: typeof authLoginRoute
  authRegisterRoute: typeof authRegisterRoute
}

const authLayoutRouteChildren: authLayoutRouteChildren = {
  authLoginRoute: authLoginRoute,
  authRegisterRoute: authRegisterRoute,
}

const authLayoutRouteWithChildren = authLayoutRoute._addFileChildren(
  authLayoutRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  appLayoutRoute: appLayoutRouteWithChildren,
  authLayoutRoute: authLayoutRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiStripeWebhookServerRoute: ApiStripeWebhookServerRoute,
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
  ApiTrpcSplatServerRoute: ApiTrpcSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
